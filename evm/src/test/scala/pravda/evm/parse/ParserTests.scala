package pravda.evm

package parse

import fastparse.byte.all._
import pravda.evm._
import pravda.evm.EVM._
import utest._

object ParserTests extends TestSuite {

  val tests = Tests {
    'SimpleStorage - {
      val bytes = readSolidityBinFile("SimpleStorage.bin")

      Parser(bytes) ==>
        Right(
          List(
            Push(hex"0x80"),
            Push(hex"0x40"),
            MStore,
            CallValue,
            Dup(1),
            IsZero,
            Push(hex"0x0010"),
            JumpI,
            Push(hex"0x00"),
            Dup(1),
            Revert,
            JumpDest,
            Pop,
            Push(hex"0xdf"),
            Dup(1),
            Push(hex"0x001f"),
            Push(hex"0x00"),
            CodeCopy,
            Push(hex"0x00"),
            Return,
            Stop,
            Push(hex"0x80"),
            Push(hex"0x40"),
            MStore,
            Push(hex"0x04"),
            CallDataSize,
            Lt,
            Push(hex"0x49"),
            JumpI,
            Push(hex"0x00"),
            CallDataLoad,
            Push(hex"0x0100000000000000000000000000000000000000000000000000000000"),
            Swap(1),
            Div,
            Push(hex"0xffffffff"),
            And,
            Dup(1),
            Push(hex"0x60fe47b1"),
            Eq,
            Push(hex"0x4e"),
            JumpI,
            Dup(1),
            Push(hex"0x6d4ce63c"),
            Eq,
            Push(hex"0x78"),
            JumpI,
            JumpDest,
            Push(hex"0x00"),
            Dup(1),
            Revert,
            JumpDest,
            CallValue,
            Dup(1),
            IsZero,
            Push(hex"0x59"),
            JumpI,
            Push(hex"0x00"),
            Dup(1),
            Revert,
            JumpDest,
            Pop,
            Push(hex"0x76"),
            Push(hex"0x04"),
            Dup(1),
            CallDataSize,
            Sub,
            Dup(2),
            Add,
            Swap(1),
            Dup(1),
            Dup(1),
            CallDataLoad,
            Swap(1),
            Push(hex"0x20"),
            Add,
            Swap(1),
            Swap(3),
            Swap(2),
            Swap(1),
            Pop,
            Pop,
            Pop,
            Push(hex"0xa0"),
            Jump,
            JumpDest,
            Stop,
            JumpDest,
            CallValue,
            Dup(1),
            IsZero,
            Push(hex"0x83"),
            JumpI,
            Push(hex"0x00"),
            Dup(1),
            Revert,
            JumpDest,
            Pop,
            Push(hex"0x8a"),
            Push(hex"0xaa"),
            Jump,
            JumpDest,
            Push(hex"0x40"),
            MLoad,
            Dup(1),
            Dup(3),
            Dup(2),
            MStore,
            Push(hex"0x20"),
            Add,
            Swap(2),
            Pop,
            Pop,
            Push(hex"0x40"),
            MLoad,
            Dup(1),
            Swap(2),
            Sub,
            Swap(1),
            Return,
            JumpDest,
            Dup(1),
            Push(hex"0x00"),
            Dup(2),
            Swap(1),
            SStore,
            Pop,
            Pop,
            Jump,
            JumpDest,
            Push(hex"0x00"),
            Dup(1),
            SLoad,
            Swap(1),
            Pop,
            Swap(1),
            Jump,
            Stop
          ))
    }

    'SimpleToken - {
      val bytes = readSolidityBinFile("SimpleToken/SimpleToken.bin")

      Parser(bytes) ==> Right(
        List(
          Push(hex"0x80"),
          Push(hex"0x40"),
          MStore,
          CallValue,
          Dup(1),
          IsZero,
          Push(hex"0x0010"),
          JumpI,
          Push(hex"0x00"),
          Dup(1),
          Revert,
          JumpDest,
          Pop,
          Push(hex"0x043e"),
          Dup(1),
          Push(hex"0x0020"),
          Push(hex"0x00"),
          CodeCopy,
          Push(hex"0x00"),
          Return,
          Invalid,
          Push(hex"0x80"),
          Push(hex"0x40"),
          MStore,
          Push(hex"0x04"),
          CallDataSize,
          Lt,
          Push(hex"0x005c"),
          JumpI,
          Push(hex"0x00"),
          CallDataLoad,
          Push(hex"0x0100000000000000000000000000000000000000000000000000000000"),
          Swap(1),
          Div,
          Dup(1),
          Push(hex"0x27e235e3"),
          Eq,
          Push(hex"0x0061"),
          JumpI,
          Dup(1),
          Push(hex"0x70a08231"),
          Eq,
          Push(hex"0x00c6"),
          JumpI,
          Dup(1),
          Push(hex"0xa9059cbb"),
          Eq,
          Push(hex"0x012b"),
          JumpI,
          Dup(1),
          Push(hex"0xf11b9fc8"),
          Eq,
          Push(hex"0x019e"),
          JumpI,
          JumpDest,
          Push(hex"0x00"),
          Dup(1),
          Revert,
          JumpDest,
          CallValue,
          Dup(1),
          IsZero,
          Push(hex"0x006d"),
          JumpI,
          Push(hex"0x00"),
          Dup(1),
          Revert,
          JumpDest,
          Pop,
          Push(hex"0x00b0"),
          Push(hex"0x04"),
          Dup(1),
          CallDataSize,
          Sub,
          Push(hex"0x20"),
          Dup(2),
          Lt,
          IsZero,
          Push(hex"0x0084"),
          JumpI,
          Push(hex"0x00"),
          Dup(1),
          Revert,
          JumpDest,
          Dup(2),
          Add,
          Swap(1),
          Dup(1),
          Dup(1),
          CallDataLoad,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Swap(1),
          Push(hex"0x20"),
          Add,
          Swap(1),
          Swap(3),
          Swap(2),
          Swap(1),
          Pop,
          Pop,
          Pop,
          Push(hex"0x0211"),
          Jump,
          JumpDest,
          Push(hex"0x40"),
          MLoad,
          Dup(1),
          Dup(3),
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Swap(2),
          Pop,
          Pop,
          Push(hex"0x40"),
          MLoad,
          Dup(1),
          Swap(2),
          Sub,
          Swap(1),
          Return,
          JumpDest,
          CallValue,
          Dup(1),
          IsZero,
          Push(hex"0x00d2"),
          JumpI,
          Push(hex"0x00"),
          Dup(1),
          Revert,
          JumpDest,
          Pop,
          Push(hex"0x0115"),
          Push(hex"0x04"),
          Dup(1),
          CallDataSize,
          Sub,
          Push(hex"0x20"),
          Dup(2),
          Lt,
          IsZero,
          Push(hex"0x00e9"),
          JumpI,
          Push(hex"0x00"),
          Dup(1),
          Revert,
          JumpDest,
          Dup(2),
          Add,
          Swap(1),
          Dup(1),
          Dup(1),
          CallDataLoad,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Swap(1),
          Push(hex"0x20"),
          Add,
          Swap(1),
          Swap(3),
          Swap(2),
          Swap(1),
          Pop,
          Pop,
          Pop,
          Push(hex"0x0229"),
          Jump,
          JumpDest,
          Push(hex"0x40"),
          MLoad,
          Dup(1),
          Dup(3),
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Swap(2),
          Pop,
          Pop,
          Push(hex"0x40"),
          MLoad,
          Dup(1),
          Swap(2),
          Sub,
          Swap(1),
          Return,
          JumpDest,
          CallValue,
          Dup(1),
          IsZero,
          Push(hex"0x0137"),
          JumpI,
          Push(hex"0x00"),
          Dup(1),
          Revert,
          JumpDest,
          Pop,
          Push(hex"0x0184"),
          Push(hex"0x04"),
          Dup(1),
          CallDataSize,
          Sub,
          Push(hex"0x40"),
          Dup(2),
          Lt,
          IsZero,
          Push(hex"0x014e"),
          JumpI,
          Push(hex"0x00"),
          Dup(1),
          Revert,
          JumpDest,
          Dup(2),
          Add,
          Swap(1),
          Dup(1),
          Dup(1),
          CallDataLoad,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Swap(1),
          Push(hex"0x20"),
          Add,
          Swap(1),
          Swap(3),
          Swap(2),
          Swap(1),
          Dup(1),
          CallDataLoad,
          Swap(1),
          Push(hex"0x20"),
          Add,
          Swap(1),
          Swap(3),
          Swap(2),
          Swap(1),
          Pop,
          Pop,
          Pop,
          Push(hex"0x0271"),
          Jump,
          JumpDest,
          Push(hex"0x40"),
          MLoad,
          Dup(1),
          Dup(3),
          IsZero,
          IsZero,
          IsZero,
          IsZero,
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Swap(2),
          Pop,
          Pop,
          Push(hex"0x40"),
          MLoad,
          Dup(1),
          Swap(2),
          Sub,
          Swap(1),
          Return,
          JumpDest,
          CallValue,
          Dup(1),
          IsZero,
          Push(hex"0x01aa"),
          JumpI,
          Push(hex"0x00"),
          Dup(1),
          Revert,
          JumpDest,
          Pop,
          Push(hex"0x01f7"),
          Push(hex"0x04"),
          Dup(1),
          CallDataSize,
          Sub,
          Push(hex"0x40"),
          Dup(2),
          Lt,
          IsZero,
          Push(hex"0x01c1"),
          JumpI,
          Push(hex"0x00"),
          Dup(1),
          Revert,
          JumpDest,
          Dup(2),
          Add,
          Swap(1),
          Dup(1),
          Dup(1),
          CallDataLoad,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Swap(1),
          Push(hex"0x20"),
          Add,
          Swap(1),
          Swap(3),
          Swap(2),
          Swap(1),
          Dup(1),
          CallDataLoad,
          Swap(1),
          Push(hex"0x20"),
          Add,
          Swap(1),
          Swap(3),
          Swap(2),
          Swap(1),
          Pop,
          Pop,
          Pop,
          Push(hex"0x0383"),
          Jump,
          JumpDest,
          Push(hex"0x40"),
          MLoad,
          Dup(1),
          Dup(3),
          IsZero,
          IsZero,
          IsZero,
          IsZero,
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Swap(2),
          Pop,
          Pop,
          Push(hex"0x40"),
          MLoad,
          Dup(1),
          Swap(2),
          Sub,
          Swap(1),
          Return,
          JumpDest,
          Push(hex"0x00"),
          Push(hex"0x20"),
          MStore,
          Dup(1),
          Push(hex"0x00"),
          MStore,
          Push(hex"0x40"),
          Push(hex"0x00"),
          Sha3,
          Push(hex"0x00"),
          Swap(2),
          Pop,
          Swap(1),
          Pop,
          SLoad,
          Dup(2),
          Jump,
          JumpDest,
          Push(hex"0x00"),
          Dup(1),
          Push(hex"0x00"),
          Dup(4),
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Swap(1),
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Push(hex"0x00"),
          Sha3,
          SLoad,
          Swap(1),
          Pop,
          Swap(2),
          Swap(1),
          Pop,
          Jump,
          JumpDest,
          Push(hex"0x00"),
          Dup(2),
          Push(hex"0x00"),
          Dup(1),
          Caller,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Swap(1),
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Push(hex"0x00"),
          Sha3,
          SLoad,
          Sub,
          Push(hex"0x00"),
          Dup(1),
          Caller,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Swap(1),
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Push(hex"0x00"),
          Sha3,
          Dup(2),
          Swap(1),
          SStore,
          Pop,
          Dup(2),
          Push(hex"0x00"),
          Dup(1),
          Dup(6),
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Swap(1),
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Push(hex"0x00"),
          Sha3,
          SLoad,
          Add,
          Push(hex"0x00"),
          Dup(1),
          Dup(6),
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Swap(1),
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Push(hex"0x00"),
          Sha3,
          Dup(2),
          Swap(1),
          SStore,
          Pop,
          Push(hex"0x01"),
          Swap(1),
          Pop,
          Swap(3),
          Swap(2),
          Pop,
          Pop,
          Jump,
          JumpDest,
          Push(hex"0x00"),
          Dup(2),
          Push(hex"0x00"),
          Dup(1),
          Dup(6),
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Swap(1),
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Push(hex"0x00"),
          Sha3,
          SLoad,
          Add,
          Push(hex"0x00"),
          Dup(1),
          Dup(6),
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Push(hex"0xffffffffffffffffffffffffffffffffffffffff"),
          And,
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Swap(1),
          Dup(2),
          MStore,
          Push(hex"0x20"),
          Add,
          Push(hex"0x00"),
          Sha3,
          Dup(2),
          Swap(1),
          SStore,
          Pop,
          Push(hex"0x01"),
          Swap(1),
          Pop,
          Swap(3),
          Swap(2),
          Pop,
          Pop,
          Jump,
          Invalid
        ))

    }
  }
}
